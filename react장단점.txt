[ 리액트의 Virtual DOM의 작동과정 ]
  function HelloMessage(){
    const [name, setName] = React.useState('foo');
      return (
        <div>Hello {name}</div>
      );
    }
  ReactDOM.render(<HelloMessage name="bar" />, mountNode)

  1. HelloMessage 에서 'Hello foo' 를 return하여 렌더링 중
  2. state의 name이 'bar'로 변경
  3. state값이 변경되었기 때문에 render 함수를 재호출
  4. HelloMessage에서 'Hello bar'를 return
  5. Virtual DOM에서 변경된 내용(name)을 감지, 해당 <div>안의 내용을 DOM에서 수정
  6. 브라우저에서 변경 값을 감지하고 새로운 화면 렌더링
  즉, Virtual DOM과 Real DOM을 비교해 변경된 사항만 반영하여 실제 돔에서 수정된 새화면을 렌더링한다.



[ React 장점 ]
1. 컴포넌트 기반 구조
  - React를 사용해 독립적으로 실행되는 다양한 component들로 웹 페이지를 나눌 수 있음
  - 다른 요소에 미칠 영향을 걱정하지 않고 업데이트 할 수 있음
  - 모듈화를 통해 협업이 용이하다.
  - 컴포넌트 기반 아키텍처를 사용하여 각 부분을 분리하여 개발하기 때문에 재사용이 용이하고 유지 보수에 효율적
    ```
        import React, { Component } from 'react';
        
        class App extends Component {
          render() {
            return (
              <div>
                <Header />
                <Content />
              </div>
            );
          }
        }
        
        class Header extends Component {
          render() {
            return (
              <div>
                <h1>Header</h1>
              </div>
            );
          }
        }
        
        class Content extends Component {
          render() {
            return (
              <div>
                <p>Content</p>
              </div>
            );
          }
        }
        
        export default App;
        ```
        
    위의 예시 코드에서 **`Header`**와 **`Content`**는 각각 독립된 컴포넌트로 구성되어 있으며, **`App`** 컴포넌트에서 이들을 조합하여 웹 페이지를 구성하고 있다. 이렇게 컴포넌트를 분리하면, 개발 및 유지보수가 쉬워지며, 컴포넌트를 재사용할 수 있어 코드의 중복을 방지할 수 있다.

  - React는 JSX라는 문법을 사용하여 자바스크립트와 HTML을 혼합하여 작성할 수 있고 이를 통해 UI를 만들기 위한 코드를 간단하고 직관적으로 작성할 수 있다
    ```
        jsxCopy code
        import React from 'react';
        
        class MyComponent extends React.Component {
          render() {
            return (
              <div>
                <h1>Hello, {this.props.name}!</h1>
                <p>This is a React component.</p>
              </div>
            );
          }
        }
        
        export default MyComponent;
    ```

    위의 예시처럼 JSX를 사용하여 HTML과 JavaScript를 혼합하여 작성할 수 있다.

2. 높은 성능
  - SPA에서, 가상 DOM을 사용해 전체 페이지를 로딩하지 않고도 사용자와 역동적인 상호작용이 가능하도록 함
  - CSR, SPA에 최적화되어 부드럽게 동작하는 html 만들기가 가능
  - 사용자의 행위에 의해 변화된 내용은 우선 가상 DOM에 의해 처리되고, React 서버가 판단하기에 필요한 경우 해당 부분만 실제 DOM을 다시 그리므로 불필요한 렌더링 과정을 최소화할 수 있음
  - 리렌더링이 Prop, State, 부모 컴포넌트가 렌더링 되었을때 일어나므로 속도가 빠르고 성능이 우수하다.
  - 인터렉션 과정에서 서버가 개입되지 않기 때문에 빠르다.
3. Redux
  - component끼리 모두 소통하고 의존하게 되어 데이터를 불안정하게 하는 것을 막기 위해, Redux는 페이지의 모든 component들이 최신 데이터와 조화를 이루도록 관리함
  - component 간 직접적인 소통 대신 component들은 데이터를 Redux로 보내고, Redux는 모든 요소들이 각자에게 의존하지 않고도 항상 새로운 데이터로 업데이트 되어 있는 것이 가능하도록 함
4. 배우기 쉬움
  - HTML과 JavaScript에 대한 이해가 있다면 쉽게 배울 수 있음
  - 유연성을 보장하므로 개발자들로 하여금 MVC나 기타 다른 구조들처럼 특정한 패턴을 따르도록 강요하지 않음
5. Mobile App 개발
  - 같은 React 개념과 문법으로 모바일 어플리케이션도 제작 가능
    
      ```
        // 초기 DOM
        <div id="app">
        <h1>Hello, World!</h1>
        <p>This is a paragraph.</p>
        </div>
        
        // React 요소
        const element = (
        <div>
            <h1>Hello, World!</h1>
            <p>This is a paragraph.</p>
        </div>
        );
        
        // 가상돔
        const virtualDOM = {
        type: 'div',
        props: {
            children: [
            {
                type: 'h1',
                props: {
                children: 'Hello, World!'
                }
            },
            {
                type: 'p',
                props: {
                children: 'This is a paragraph.'
                }
            }
            ]
        }
        };
        
        // 변경된 React 요소
        const updatedElement = (
        <div>
            <h1>Hello, React!</h1>
            <p>This is a new paragraph.</p>
        </div>
        );
        
        // 변경된 가상돔
        const updatedVirtualDOM = {
        type: 'div',
        props: {
            children: [
            {
                type: 'h1',
                props: {
                children: 'Hello, React!'
                }
            },
            {
                type: 'p',
                props: {
                children: 'This is a new paragraph.'
                }
            }
            ]
        }
        };
    ```

-----------------------------------------------------------------------------------

[ React 단점 ]
1. 빠른 성장 속도
  - 빠르게 성장하는 만큼 빠르게 변화함
2. 유연성과 컨벤션 부족
  - 새로 들어간 팀에서 어떤 구조와 패턴을 사용하고 있을지 예측하기 어려움
  - 다른 라이브러리와 함께 사용할 때 복잡성이 증가할 수 있다. 예를 들어, React에서 Redux를 사용하는 경우, 상태 관리가 복잡해질 수 있다.
  - React는 성능이 뛰어난 편이지만, React 앱의 크기가 커질수록 초기 로드 시간이 늘어날 수 있다.
3. 모든 기능을 갖춘 프레임워크가 아님
  - React는 MVC 구조에서 View 부분만을 담당하므로 Model과 Controller 부분에 대해서는 추가적인 라이브러리나 도구의 사용이 필요
4. SEO의 한계
  - CSR 기반으로 하기 때문에 SEO(검색엔진 최적화)에 어려움이 있다.
  그러나, Next.js를 통해 검색엔진 최적화 하는 방법이 있다.